# -*- coding: utf-8 -*-
"""customer Shopping trends Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mJI2EhoMEBS6pysx6z8R4pvRjaiH0iqI
"""

import pandas as pd
pd.options.display.float_format = '{:,.2f}'.format
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import Image
from sklearn.tree import DecisionTreeClassifier


colors = ["#89CFF0", "#FF69B4", "#FFD700", "#7B68EE", "#FF4500",
          "#9370DB", "#32CD32", "#8A2BE2", "#FF6347", "#20B2AA",
          "#FF69B4", "#00CED1", "#FF7F50", "#7FFF00", "#DA70D6"]

df = pd.read_csv("shopping_trends_updated.csv")
df.head(10)

df.shape

df.columns

df.info()

df.describe()

df.describe()

df.isnull().sum()

df.duplicated().sum()

"""Visualization"""

fig, ax = plt.subplots(figsize = (15, 5))

ax.hist(df['Age'], bins = 26, edgecolor = 'black', color = 'lightblue', density = True)
df['Age'].plot(kind = 'kde', color = 'red', ax = ax)

ax.set_xlabel('Age')
ax.set_ylabel('Density')
ax.set_title('Age Distribution Histogram with Density Curve')
ax.legend(['Density Curve', 'Histogram'])
step = 4
plt.xticks(range(int(df['Age'].min()), int(df['Age'].max()) + 1, step))

plt.show()

"""1.GENDER"""

df["Gender"].value_counts()

ax = df["Gender"].value_counts().plot(kind = 'bar', color = colors, rot=0)
ax.set_xticklabels(('Male', 'Female'))

for p in ax.patches:
    ax.annotate(int(p.get_height()), (p.get_x() + 0.25, p.get_height() + 1), ha = 'center', va = 'bottom', color = 'black')
plt.xlabel('Gender', weight = "bold", fontsize = 14, labelpad = 20)
plt.ylabel('Number of Occurrences', weight = "bold", fontsize = 14, labelpad = 20);

plt.figure(figsize = (8, 4))
counts = df["Gender"].value_counts()
explode = (0, 0.05)

counts.plot(kind = 'pie', fontsize = 14, colors = colors, explode = explode, autopct = '%1.1f%%')
plt.xlabel('Gender', weight = "bold", fontsize = 14, labelpad = 20)
plt.axis('equal')
plt.legend(labels = counts.index, loc = "best")
plt.show()

"""2. Category"""

df["Category"].value_counts()

ax = df["Category"].value_counts().plot(kind = 'bar',color = colors, rot = 0)
ax.set_xticklabels(('Clothing', 'Accessories', 'Footwear', 'Outerwear'))

for p in ax.patches:
    ax.annotate(int(p.get_height()), (p.get_x() + 0.25, p.get_height() + 1), ha = 'center', va = 'bottom', color = 'black')
    ax.tick_params(axis = 'both', labelsize = 15)
plt.xlabel('Category', weight = "bold", fontsize = 14, labelpad = 20)
plt.ylabel('Number of Occurrences', weight = "bold", fontsize = 14, labelpad = 20);

plt.figure(figsize = (8, 4))
counts = df["Category"].value_counts()

counts.plot(kind='pie', fontsize=12, colors=colors, explode=(0.01, 0.01, 0.01, 0.01), autopct='%1.1f%%')
plt.xlabel('Category', weight="bold", fontsize=14, labelpad=20)
plt.axis('equal')
plt.legend(labels=counts.index, loc="best")
plt.show()

"""3.LOCATION"""

plt.figure(figsize=(10, 20))
df.Location.value_counts(ascending=True).plot(kind='barh',color=colors)
plt.show()

"""4.Size"""

df["Size"].value_counts()

ax = df["Size"].value_counts().plot(kind = 'bar', color = colors, rot = 0)
ax.set_xticklabels(('M', 'L', 'S', 'XL'))

for p in ax.patches:
    ax.annotate(int(p.get_height()), (p.get_x() + 0.25, p.get_height() + 1), ha = 'center', va = 'bottom', color = 'black')
    ax.tick_params(axis = 'both', labelsize = 15)
plt.xlabel('Size', weight = "bold", fontsize = 14, labelpad = 20)
plt.ylabel('Number of Occurrences', weight = "bold", fontsize = 14, labelpad = 20);

plt.figure(figsize = (8, 4))

counts = df["Size"].value_counts()

counts.plot(kind = 'pie', fontsize = 12, colors = colors, explode = (0.01, 0.01, 0.01, 0.01), autopct = '%1.1f%%')
plt.xlabel('Size', weight = "bold", fontsize = 14, labelpad = 20)
plt.axis('equal')
plt.legend(labels = counts.index, loc = "best")
plt.show()

"""5.Seasons"""

df["Season"].value_counts()

"""Analyse"""

average_age = df['Age'].mean()
print("Average age:", average_age)

total_purchase_by_category = df.groupby('Category')['Purchase Amount (USD)'].sum()
print("total purchaseby categories:")
print(total_purchase_by_category)

most_common_payment_method = df['Payment Method'].mode()[0]
print("most common payement method:", most_common_payment_method)

sns.pairplot(df,hue='Gender')

